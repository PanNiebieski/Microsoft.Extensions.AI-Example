==================================================
# Summary
Prompt:
Summarize the article in no more than 300 words.
Write a summary as if you were the author of the text

# Article content:

<p>[metro] Ostatnio zrobiłem webinar na temat budowania aplikacji w C# od zera. Skoncentrowałem się na dobrych praktykach oraz na najlepszych paczkach NuGet, kt&oacute;re obecnie są w ofercie dla C# i dla .NET.&nbsp;</p>
<p>MediatR na pewno jest w pierwszej piątce najlepszy paczek Nuget.</p>
<p>MediatR pomaga Ci szybko napisać aplikację przy pomocy wzorca projektowego mediator oraz zastosować CQRS.&nbsp; [more]</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/mediatr--cqrs-i-wzorzec-projektowy-mediator-w-aspnet-core/mediator_637469813397560493.png" alt="mediator jaki problem rozwiązuje" width="400" height="225" /></p>
<p>O co chodzi? Chodzi o to, że masz jeden obiekt, kt&oacute;rego zadaniem jest określenie komunikacji między innymi obiektami. W ten spos&oacute;b unikasz faktu, że obiekty muszą gadać bezpośrednio do siebie (czyli tworzyć swoje instancje) albo muszą korzystać ze swoich interfejs&oacute;w.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/mediatr--cqrs-i-wzorzec-projektowy-mediator-w-aspnet-core/mediator2_637469813397684033.png" alt="mediator w akcji" width="400" height="225" /></p>
<p>Wyobraź sobie <strong>sekretarkę</strong>, kt&oacute;ra wie, jakie dokumenty mają iść do jakiej osoby w biurowcu. Chcesz więc wysłać swoje dokumenty więc idziesz do sekretarki.</p>
<p>Bezpośrednio ty nie wiesz do kogo p&oacute;jdą twoje papiery. Ważne, że to <strong>sekretarka</strong> wie. <strong>Sekretarka</strong> jest takim mediatorem.</p>
<p>Dzięki temu twoje klasy nie będą między sobą powiązane.&nbsp;Unikniemy w ten spos&oacute;b referencji jednej klasy do drugiej.</p>
<p>Zalety :</p>
<ul>
<li>Zmiany w kodzie potem łatwo dokonać</li>
<li>Kod taki łatwo się testuje</li>
<li>Cały tw&oacute;j kod ma pewien wz&oacute;r, kt&oacute;ry potem może być użyty ponownie w kodzie przez innego programistę bez problemu</li>
<li>Łatwo znaleźć odpowiednie funkcje w kodzie</li>
<li>Zasada "Single Responsibility Principle" tutaj jest traktowana bardzo poważnie. Nie można już tej zasady spełnić lepiej.</li>
</ul>
<p>MediatR potrafi także na dwa sposoby przetworzyć komunikaty</p>
<ul>
<li>Request : Wysyła komunikaty do jednego obiektu/serwisu. Może (ale nie musi) zwr&oacute;cić rezultat bezpośrednio do klasy, kt&oacute;ra wywoła tego mediatora.</li>
<li>Notfications : Wysyła komunikaty do wielu obiekt&oacute;w/serwis&oacute;w. Niestety wtedy nic nie może zostać zwr&oacute;cone.</li>
</ul>
<p>Dla stylu wysłania "Request" mamy następujące interfejsy.</p>
<p>Oto dwa interfejsy do wysłania wiadomości do naszej <strong>sekretarki</strong>&nbsp;("mediatora")</p>
<ul>
<li>IRequest : Określa komunikat, kt&oacute;ry będziemy wysyłać do naszej sekretarki ("mediatora")</li>
<li>IRequestHandler : Określa co ma zostać zwr&oacute;cone do klasy, kt&oacute;ra wykorzystuje mediatora (sekretarki już nie wykorzystujemy)</li>
</ul>
<p>Zobaczmy jak działa to w praktyce w ASP.NET CORE 5.O.&nbsp;</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/mediatr-cqrs-i-wzorzec-projektowy-mediator-w-aspnet-core/01_637469864045778263.PNG" alt="ASP.NET CORE 5.O. " width="697" height="246" /></p>
<p>Instalujemy odpowiednie paczki NuGet i jedziemy</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/mediatr-cqrs-i-wzorzec-projektowy-mediator-w-aspnet-core/02_637469864045835543.PNG" alt="MediatR paczka NuGet" width="649" height="277" /></p>
<p>W klasie Startup musimy zarejestrować użycie MediatR. W końcu ta paczka NuGet musi potem wykryć wszystkie obiekty, kt&oacute;re będą implementować odpowiednie interfejsy.</p>
<pre><code class="hljs cs ">// Startup.cs
public void ConfigureServices(IServiceCollection services)
{
  // other services

  services.AddMediatR(typeof(Startup));
}</code></pre>
<p>Jeśli korzystasz z innego kontenera wstrzykiwania zależności to nie ma problemu. Wiki nadchodzi Ci z pomocą :&nbsp;<a href="https://github.com/jbogard/MediatR/wiki" target="_blank" rel="noopener">https://github.com/jbogard/MediatR/wiki</a></p>
<p>Do zabawy przydadzą się jakieś klasy statyczne z gotowymi listami obiekt&oacute;w. Patrz oto klasy reprezentujące wpisy i kategorię na bloga.</p>
<pre><code class="hljs cs ">public static class DummyPosts
{
    public static List&lt;Post&gt; Get()
    {
        var cat = DummyCategories.Get();

        Post p1 = new Post()
        {
            Author = "Damian",
            Date = DateTime.Now.AddMonths(-6),
            Description = @"Nasze aplikacje ASP.NET CORE coraz częściej są tylko aplikacją REST. To oczywiście wymaga Walidacji po stronie klienta i po stronie serwera
Jak taką walidację jak najszybciej zrobić.Może przecież sam napisać takie warunki,
            ale przy dużej ilości klas,
            kt&oacute;re występują jako parametry mija się to z celem.

Możesz też skorzystać z atrybut&oacute;w i oznaczyć reguły do każdej właściwości.",
            ImageUrl = "https://cezarywalenciuk.pl/Posts/programing/icons/_withbackground/R2/656_walidacja-z-fluentvalidation-waspnet-core--swagger.png",
            PostId = 1,
            Rate = 8,
            CategoryId = DummySeed.Aspnet,
            Title = "Walidacja z FluentValidation w ASP.NET Core + Swagger",
            Url = "https://cezarywalenciuk.pl/blog/programing/walidacja-z-fluentvalidation-waspnet-core--swagger"
        };

        Post p2 = new Post()
        {
            Author = "Damian",
            Date = DateTime.Now.AddMonths(-6),
            Description = @"Programiści codziennie tworzą jakąś aplikację sieciową typu REST. Teraz nastaje pytanie, jak najlepiej zrozumieć jak dane API działa. Do tego mamy dokumentacje, ale jeśli pracujesz w szybkich, zamkniętych projektach to takiej dokumentacji może nie być.",
            ImageUrl = "https://cezarywalenciuk.pl/Posts/programing/icons/_withbackground/R2/656_walidacja-z-fluentvalidation-waspnet-core--swagger.png",
            PostId = 2,

            CategoryId = DummySeed.Aspnet,
            Rate = 7,
            Title = "Swagger UI : Dokumentowanie API w ASP.NET CORE",
            Url = "https://cezarywalenciuk.pl/blog/programing/swagger-ui--dokumentowanie-api-w-aspnet-core"
        };

        Post p3 = new Post()
        {
            Author = "Stefan",
            Date = DateTime.Now.AddMonths(-12),
            Description = @"W pod koniec roku 2017 zacząłem ćwiczyć. Proste ćwiczenia rzeczywiście robią r&oacute;żnice, gdy masz siedzący tryb życia. A co z bieganiem ?
Pamiętam jak pierwszy raz na bieżni nie byłem w stanie wytrzymać 5 minut normalnego spaceru. Powoli z tygodnia na dzień zacząłem sobie stawiać wyższe progi i tak odkryłem, że o ile jest to na początku bolesne to jak twoje ciało da Ci te endorfiny to już...aż chce się biegać więcej. ",
            ImageUrl = "https://cezarywalenciuk.pl/Posts/programing/icons/_withbackground/R2/656_walidacja-z-fluentvalidation-waspnet-core--swagger.png",
            PostId = 3,
            CategoryId = DummySeed.Filzofia,
            Rate = 5,
            Title = "Bieganie jak się do tego zmotywować : Zdrowie Programisty",
            Url = "https://cezarywalenciuk.pl/blog/programing/bieganie-jak-sie-do-tego-zmotywowac--zdrowie-programisty"
        };

        Post p4 = new Post()
        {
            Author = "Damian",
            Date = DateTime.Now.AddMonths(-12),
            Description = @"Logowanie działania aplikacji. Jak wiedzieć w końcu, gdy coś nie działa. M&oacute;j blog jest napisany w C# i działa po ASP.NET CORE. Jak to jednak bywa z napisaną przez siebie aplikacją pojawiają się błędy więc do bloga dodałem mechanizm logowania błęd&oacute;w. W taki spos&oacute;b znalazłem wiele dziwnych przypadk&oacute;w uszkodzonych wpis&oacute;w w formacie XML, kt&oacute;re rozwalały Parser. Znalazłem też złe zbudowane przez ze mnie lista kurs&oacute;w. ",
            ImageUrl = "https://cezarywalenciuk.pl/Posts/programing/icons/_withbackground/R2/656_walidacja-z-fluentvalidation-waspnet-core--swagger.png",
            PostId = 4,
            CategoryId = DummySeed.Aspnet,
            Rate = 5,
            Title = "NLog z ASP.NET Core : Logowanie błęd&oacute;w w aplikacji",
            Url = "https://cezarywalenciuk.pl/blog/programing/nlog-z-aspnet-core--logowanie-b%C5%82edow-w-aplikacji"
        };

        Post p5 = new Post()
        {
            Author = "Damian",
            Date = DateTime.Now.AddMonths(-12),
            Description = @"Logowanie działania aplikacji. Jak wiedzieć w końcu, gdy coś nie działa. M&oacute;j blog jest napisany w C# i działa po ASP.NET CORE. Jak to jednak bywa z napisaną przez siebie aplikacją pojawiają się błędy więc do bloga dodałem mechanizm logowania błęd&oacute;w. W taki spos&oacute;b znalazłem wiele dziwnych przypadk&oacute;w uszkodzonych wpis&oacute;w w formacie XML, kt&oacute;re rozwalały Parser. Znalazłem też złe zbudowane przez ze mnie lista kurs&oacute;w. ",
            ImageUrl = "https://cezarywalenciuk.pl/Posts/programing/icons/_withbackground/R2/656_walidacja-z-fluentvalidation-waspnet-core--swagger.png",
            PostId = 5,
            CategoryId = DummySeed.Aspnet,
            Rate = 5,
            Title = "NLog z ASP.NET Core : Logowanie błęd&oacute;w w aplikacji",
            Url = "https://cezarywalenciuk.pl/blog/programing/nlog-z-aspnet-core--logowanie-b%C5%82edow-w-aplikacji"
        };

        Post p6 = new Post()
        {
            Author = "Damian",
            Date = DateTime.Now.AddMonths(-8),
            Description = @"W tym  artykule zobaczymy jak zintegrować AutoMapper  z ASP.NET CORE dla .NET 5, chociaż bądźmy szczerzy możesz skorzystać z tej biblioteki w każdym projekcie w C#.",
            ImageUrl = "https://cezarywalenciuk.pl/Posts/programing/icons/_withbackground/R2/656_walidacja-z-fluentvalidation-waspnet-core--swagger.png",
            PostId = 6,
            CategoryId = DummySeed.Aspnet,
            Rate = 9,
            Title = "AutoMapper z ASP.NET CORE czyli mapowanie klas",
            Url = "https://cezarywalenciuk.pl/blog/programing/automapper-z-aspnet-core"
        };

        Post p7 = new Post()
        {
            Author = "Adrian",
            Date = DateTime.Now.AddMonths(-14),
            Description = @"Nagrywanie Gif - &oacute;w ? Robienie obrazk&oacute;w na bloga ? Jak to robić jeszcze szybciej ? ",
            ImageUrl = "https://cezarywalenciuk.pl/Posts/programing/icons/_withbackground/R2/656_walidacja-z-fluentvalidation-waspnet-core--swagger.png",
            PostId = 7,
            CategoryId = DummySeed.TrikiZWindows,
            Rate = 4,
            Title = "ShareX : Lepszy PrintScreen oraz robienie Gif-&oacute;w twojego pulpitu?",
            Url = "https://cezarywalenciuk.pl/blog/programing/sharex-lepszy-printscreen-oraz-robienie-gif-ow"
        };

        Post p8 = new Post()
        {
            Author = "Adrian",
            Date = DateTime.Now.AddMonths(-15),
            Description = @"Jak jeszcze lepiej ulepszyć system operacyjny Windows.

Czy być może programy tobie, kt&oacute;re za chwilę to śmieci, kt&oacute;re nie będą ci potrzebne?

Zazwyczaj w tym cyklu pokazuje programy, z kt&oacute;re moim bardzo zmieniają przepływ mojej pracy.",
            ImageUrl = "https://cezarywalenciuk.pl/Posts/programing/icons/_withbackground/R2/656_walidacja-z-fluentvalidation-waspnet-core--swagger.png",
            PostId = 8,
            CategoryId = DummySeed.TrikiZWindows,
            Rate = 5,
            Title = "QuickLook, TeraCopy, ProcessExplorer czy to potrzebne jest ?",
            Url = "https://cezarywalenciuk.pl/blog/programing/sharex-lepszy-printscreen-oraz-robienie-gif-ow"
        };

        Post p9 = new Post()
        {
            Author = "Adrian",
            Date = DateTime.Now.AddMonths(-15),
            Description = @"Jak jeszcze lepiej ulepszyć system operacyjny Windows.

Czy być może programy tobie, kt&oacute;re za chwilę to śmieci, kt&oacute;re nie będą ci potrzebne?

Zazwyczaj w tym cyklu pokazuje programy, z kt&oacute;re moim bardzo zmieniają przepływ mojej pracy.",
            ImageUrl = "https://cezarywalenciuk.pl/Posts/programing/icons/_withbackground/R2/656_walidacja-z-fluentvalidation-waspnet-core--swagger.png",
            PostId = 9,
            CategoryId = DummySeed.Docker,
            Rate = 9,
            Title = "Docker File dla Go, ASP.NET Core, .NET 5, Java Spring, NodeJS, Python",
            Url = "https://cezarywalenciuk.pl/blog/programing/docker-file-dla-go-aspnet-core-net-5-java-spring-nodejs-python"
        };

        List&lt;Post&gt; p = new List&lt;Post&gt;();
        p.Add(p1); p.Add(p3);
        p.Add(p2); p.Add(p4);
        p.Add(p5); p.Add(p6);
        p.Add(p8); p.Add(p7);
        p.Add(p9);

        return p;
    }
}

public static class DummyCategories
{
    public static List&lt;Category&gt; Get()
    {
        Category c1 = new Category()
        {
            CategoryId = DummySeed.Csharp,
            Name = "CSharp",
            DisplayName = "C#"
        };

        Category c2 = new Category()
        {
            CategoryId = DummySeed.Aspnet,
            Name = "aspnet",
            DisplayName = "ASP.NET"
        };

        Category c3 = new Category()
        {
            CategoryId = DummySeed.TrikiZWindows,
            Name = "triki-z-windows",
            DisplayName = "Triki z Windows"
        };

        Category c4 = new Category()
        {
            CategoryId = DummySeed.Docker,
            Name = "docker",
            DisplayName = "Docker"
        };

        Category c5 = new Category()
        {
            CategoryId = DummySeed.Filzofia,
            Name = "filozofia",
            DisplayName = "Filozofia"
        };


        List&lt;Category&gt; p = new List&lt;Category&gt;();
        p.Add(c1); p.Add(c3);
        p.Add(c2); p.Add(c4);
        p.Add(c5);

        return p;

    }
}

public static class DummySeed
{
    public static int Csharp = 1;
    public static int Aspnet = 2;
    public static int TrikiZWindows = 3;
    public static int Docker = 4;
    public static int Filzofia = 5;
}

public class Post
{
    public int PostId { get; set; }

    //[Required]
    //[StringLenght(80)]
    public string Title { get; set; }

    //[StringLenght(40)]
    public string Author { get; set; }

    public DateTime Date { get; set; }
    public string Description { get; set; }

    public int CategoryId { get; set; }
    public Category Category { get; set; }

    public string ImageUrl { get; set; }
    public string Url { get; set; }

    //[Range(0, 100)]
    public int Rate { get; set; }
}

public class Category
{
    public int CategoryId { get; set; }

    public string Name { get; set; }

    public string DisplayName { get; set; }

    public ICollection&lt;Post&gt; Posts { get; set; }
}</code></pre>
<p>Teraz w naszym kontrolerze chciałbym pobrać wszystkie wpisy.</p>
<pre><code class="hljs cs ">public class PostController : Controller
{
    [HttpGet(Name = "GetAllPosts")]
    public async Task&lt;ActionResult&lt;List&lt;Post&gt;&gt;&gt; GetAllPosts()
    {

    }
}</code></pre>
<h3>Wysyłanie Request-&oacute;w</h3>
<p>Nasze zapytanie do mediatora powinno implementować interfejs IRequest albo IRequest&lt;TResponse&gt;. Wszystko zależy od tego, czy chcesz zwracać dane, czy nie.&nbsp;</p>
<p>Gdybyśmy chcieli dodać jakieś parametry do tego zapytania to zrobiliśmy by to tutaj.&nbsp;</p>
<pre><code class="hljs cs ">public class GetAllPostsQuery 
    : IRequest&lt;List&lt;Post&gt;&gt;
{
}</code></pre>
<p>Dodajmy więc typ wyliczeniowy, aby to pokazać.</p>
<pre><code class="hljs cs ">public enum OrderByPostOptions
{
    None = 0,
    ByTitle = 1,
    ByDate = 2,
    ByAuthor = 3
}</code></pre>
<p>Będzie sortować naszą zwracaną listę wpis&oacute;w.</p>
<pre><code class="hljs cs ">public class GetAllPostsQuery
    : IRequest&lt;List&lt;Post&gt;&gt;
{
    public OrderByPostOptions OrderBy { get; set; }
}</code></pre>
<p>Teraz musimy stworzyć klasę, kt&oacute;ra obsłuży to zapytanie. Musi ona implementować IRequestHandler w następujący spos&oacute;b.</p>
<pre><code class="hljs cs ">public class GetAllPostsQueryHandler : IRequestHandler
    &lt;GetAllPostsQuery, List&lt;Post&gt;&gt;
{
    public Task&lt;List&lt;Post&gt;&gt; Handle(GetAllPostsQuery request, 
        CancellationToken cancellationToken)
    {
        var posts = DummyPosts.Get();
        if (request.OrderBy == OrderByPostOptions.ByAuthor)
            return Task.FromResult
                (posts.OrderBy(p =&gt; p.Author).ToList());
        else if (request.OrderBy == OrderByPostOptions.ByDate)
            return Task.FromResult
                (posts.OrderBy(p =&gt; p.Date).ToList());
        else if (request.OrderBy == OrderByPostOptions.ByTitle)
            return Task.FromResult
                (posts.OrderBy(p =&gt; p.Title).ToList()); 
        
        return Task.FromResult
               (posts);
    }
}</code></pre>
<p>Teraz chcemy wywołać nasze zapytanie w naszym mediatorze. Oto jak to robimy.</p>
<pre><code class="hljs cs ">public class PostController : Controller
{
    private readonly IMediator _mediator;
    public PostController(IMediator mediator)
    {
        _mediator = mediator;
    }

    [HttpGet(Name = "GetAllPosts")]
    public async Task&lt;ActionResult&lt;List&lt;Post&gt;&gt;&gt; GetAllPosts()
    {
        var request = new GetAllPostsQuery 
        {
            OrderBy = OrderByPostOptions.ByDate
        };
        var result = await _mediator.Send(request);

        return result;
    }
}</code></pre>
<p>Jak widzisz musimy strzyknąć IMediator do naszego kontrolera. Sam kontroler nie wie kto wykona jego zapytanie. Ważne, że otrzyma listę wpis&oacute;w, o kt&oacute;rą poprosił.</p>
<p>Warto zaznaczyć, że gdybyś miał polecenie, kt&oacute;re nic nie zwraca to wtedy musisz skorzystać ze specjalnej klasy <strong>UNIT</strong>, kt&oacute;ra reprezentuje dla MediatR NIC.</p>
<p>Oto przykład takiego przypadku gdy chcemy aktualizować wpis i otrzymać NIC po wykonaniu takiego polecenia.</p>
<pre><code class="hljs cs ">public class PostController : Controller
{
    [HttpPut(Name = "UpdatePost")]
    [ProducesResponseType(StatusCodes.Status204NoContent)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [ProducesDefaultResponseType]
    public async Task&lt;ActionResult&gt; Update([FromBody]
        UpdatePostCommand updatePostCommand)
    {
        await _mediator.Send(updatePostCommand);

        return NoContent();
    }</code></pre>
<p>Oto polecenie aktualizacji wpisu.</p>
<pre><code class="hljs cs ">public class UpdatePostCommand : IRequest
{
    public int PostId { get; set; }
    public string Title { get; set; }
    public string Author { get; set; }

    public DateTime Date { get; set; }
    public string Description { get; set; }

    public int CategoryId { get; set; }
    public Category Category { get; set; }

    public string ImageUrl { get; set; }
    public string Url { get; set; }
    public int Rate { get; set; }
}</code></pre>
<p>W klasie obsługujące te polecenie będziemy zwracać właśnie specjalną wartość UNIT, kt&oacute;ra określa, że nic nie zwracamy.</p>
<pre><code class="hljs cs ">public class UpdatePostCommandHandler : IRequestHandler
    &lt;UpdatePostCommand, Unit&gt;
{
    public Task&lt;Unit&gt; Handle(UpdatePostCommand request,
        CancellationToken cancellationToken)
    {
        Post p = new Post()
        {
            Author = request.Author,
            Category = request.Category,
            CategoryId = request.CategoryId,
            Date = request.Date,
            Description = request.Description,
            ImageUrl = request.ImageUrl,
            PostId = request.PostId,
            Rate = request.Rate,
            Title = request.Title,
            Url = request.Url
        };

        //UPDATED

        return  Task.FromResult(Unit.Value);
    }
}</code></pre>
<h3>CQRS ?</h3>
<p>Jak widzisz zrobiłem mały podział. Komunikaty dzielą się na : Polecenia (Command) i na zapytania (Query).</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/mediatr-cqrs-i-wzorzec-projektowy-mediator-w-aspnet-core/3_637469864045882731.PNG" alt="CQRS jak to wygląda w projekcie" width="397" height="387" /></p>
<p>Skr&oacute;t CQRS rozwijamy do "Command Query Responsibility Segregation".</p>
<p>Jak widzisz zrobiłem szybką segregację komunikat&oacute;w na Polecenia i zapytania.</p>
<p>Filozofia jest prosta.</p>
<ul>
<li>Query to zapytanie, kt&oacute;re zwraca jakąś informację, ale <strong>nie zmienia</strong> systemu np. pobranie wszystkich wpis&oacute;w.</li>
<li>Natomiast Command, czyli Polecenie <strong>ma za zadanie zmienić system, ale ma nic nie zwracać</strong> (chociaż tutaj można się kł&oacute;cić, bo status wykonania polecenia może zostać zwr&oacute;cony)</li>
</ul>
<p>Jak widzisz nawet bez twojej wiedzy w bardzo łatwy spos&oacute;b wyjaśniłem Ci jak możesz wprowadzić CQRS do swojej aplikacji bez dłuższego gadania filozoficznego, o co chodzi z tym wzorcem projektowym.</p>
<p>Oto przykład tego, jak na moim webinarze ostatecznie projekt EduZbieracz wyglądał, gdy skończyłem implementacje CQRS.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/mediatr-cqrs-i-wzorzec-projektowy-mediator-w-aspnet-core/4_637469864045934422.PNG" alt="CQRS w EduZbieraczu mn&oacute;stwo klas" width="498" height="715" /></p>
<p>Wadą całego tego wzorca CQRS oraz Mediator jest fakt, że będziesz miał mn&oacute;stwo klas. Natomiast przynajmniej możesz spać spokojnie, bo zasada "Single Responsibility Principle" nie może już być realizowana lepiej.</p>
<p>Zalety CQRS:</p>
<ul>
<li>Skalowanie</li>
<li>Bezpieczeństwo</li>
<li>Łatwe do zmiany</li>
<li>Uczy schematu działania i szukania w kodzie element&oacute;w</li>
</ul>
<p>Wady CQRS :</p>
<ul>
<li>Zwiększa liczbę klas 😱</li>
<li>Zwiększona złożoność aplikacji 🥴</li>
<li>Dobry pomysł dla dużych aplikacji 🤠&nbsp; . Dla małych nie</li>
</ul>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/mediatr-cqrs-i-wzorzec-projektowy-mediator-w-aspnet-core/5_637469864046036930.PNG" alt="Slajd CQRS z prelekcji Aplikacja C# od Zera : Architektura, CQRS, Dobre praktyki" width="700" height="392" /></p>
<h3>Wysyłanie Notyfikacji</h3>
<p>MediatR daje też możliwość wysyłania Notyfikacji. Wygląda to podobnie do wysyłania request&oacute;w.</p>
<p>R&oacute;żnica polega na tym, że stworzyć wiele obiekt&oacute;w, kt&oacute;re będą obsługiwać tę notyfikację.</p>
<p>Nie wiem jak traktować Notyfikacje do wzorca CQRS wiem jedno skoro Notyfikacje nie mogą niczego zwracać to możemy to traktować jako Command, czyli polecenie&nbsp;</p>
<p>[cloud-blue2Po co są notyfikację?] W trakcie pisania tego wpisu nie zdawałem sobie, że w sumie notyfikację w swoim działaniu mogą reprezentować zdarzenia domenowe w naszym systemie.</p>
<p>Czym są zdarzenie z punktu widzenia aplikacji CQRS? Zrobiłem o tym innym wpis, kt&oacute;ry opisuje problem, co się dzieje, gdy jeden Command uruchamiania inny Command i jak zdarzenia ratują nas przed tym problemem.</p>
<p><a href="https://cezarywalenciuk.pl/blog/programing/command-wywolujacy-kolejny-command-to-kiepski-pomysl" target="_blank" rel="noopener">https://cezarywalenciuk.pl/blog/programing/command-wywolujacy-kolejny-command-to-kiepski-pomysl</a></p>
<p>[cg]</p>
<p>Zakładamy, że notyfikację wykonują jakąś zmianę w systemie.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/mediatr-cqrs-i-wzorzec-projektowy-mediator-w-aspnet-core/6_637469884550723331.PNG" alt="Wysłanie Notyfikacji projekt" width="404" height="365" /></p>
<p>Chociaż zapewne dla bezpieczeństwa lepiej by byłoby nie mieszać tych Notyfikacji do wzorca CQRS.&nbsp;</p>
<pre><code class="hljs cs ">public class WritePostNotification
    : INotification
{
    public string WhatToWrite { get; set; }
}</code></pre>
<p>Zapiszemy w konsoli wynik naszej notyfikacji.</p>
<pre><code class="hljs cs ">public class WritePostNotificationConsoleHandler :
    INotificationHandler&lt;WritePostNotification&gt;
{
    public Task Handle(WritePostNotification notification,
        CancellationToken cancellationToken)
    {
        Console.WriteLine(notification.WhatToWrite);

        return Task.CompletedTask;
    }
}</code></pre>
<p>Odpalimy także tę klasę.</p>
<pre><code class="hljs cs ">public class WritePostNotificationDebuggerHandler :
    INotificationHandler&lt;WritePostNotification&gt;
{
    public Task Handle(WritePostNotification notification, 
        CancellationToken cancellationToken)
    {
        Debugger.Log(1,"Info",
            notification.WhatToWrite);

        return Task.CompletedTask;
    }
}</code></pre>
<p>Kontroler korzysta z metody "<strong>Publish</strong>", aby wysłać notyfikacje.</p>
<pre><code class="hljs cs ">public class PostController : Controller
{
    [HttpGet(Name = "WritePost")]
    public async Task&lt;ActionResult&gt; WritePost(string message)
    {
        await _mediator.
            Publish(
            new WritePostNotification()
            { 
                WhatToWrite = message
            });

        return NoContent();
    }</code></pre>
<h3>Pipeline Behaviours</h3>
<p>Pipeline Behaviours to typ <strong>middleware</strong>, czyli pośrednika, kt&oacute;ry uruchamia się przed i po twoim zapytaniu, czy poleceniu, czy notyfikacji.</p>
<p>Mogą one się przydać w logowaniu i przechwytywania błęd&oacute;w oraz walidacji.</p>
<p>Pośrednik&oacute;w możesz łączyć w łańcuch wywołań. Oto dwa przykład Logowania z&nbsp; Pipeline Behaviours:</p>
<pre><code class="hljs cs ">public class ConsoleWriteLineBehavior&lt;TRequest, TResponse&gt; :
IPipelineBehavior&lt;TRequest, TResponse&gt;
{

    public ConsoleWriteLineBehavior()
    {

    }

    public async Task&lt;TResponse&gt; Handle(TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate&lt;TResponse&gt; next)
    {
        Console.WriteLine($"Handling {typeof(TRequest).Name}");

        // go to the next behaviour in the chain/to the request handler
        var response = await next();

        Console.WriteLine($"Handled {typeof(TResponse).Name}");

        return response;
    }
}</code></pre>
<p>Logowanie powinno być bardziej porządne niż jakieś Console.WriteLine</p>
<pre><code class="hljs cs ">public class LoggingBehavior&lt;TRequest, TResponse&gt; : 
    IPipelineBehavior&lt;TRequest, TResponse&gt;
{
    private readonly ILogger&lt;LoggingBehavior&lt;TRequest, TResponse&gt;&gt; _logger;

    public LoggingBehavior(ILogger&lt;LoggingBehavior&lt;TRequest, TResponse&gt;&gt; logger)
    {
        _logger = logger;
    }

    public async Task&lt;TResponse&gt; Handle(TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate&lt;TResponse&gt; next)
    {
        _logger.LogInformation($"Handling {typeof(TRequest).Name}");

        var response = await next();

        _logger.LogInformation($"Handled {typeof(TResponse).Name}");

        return response;
    }
}</code></pre>
<p>Na koniec pozostało ci zarejestrować te zachowania.</p>
<pre><code class="hljs cs ">public void ConfigureServices(IServiceCollection services)
{
    services.AddMediatR(typeof(Startup));

    services.AddTransient(typeof(IPipelineBehavior&lt;,&gt;),
        typeof(LoggingBehavior&lt;,&gt;));

    services.AddTransient(typeof(IPipelineBehavior&lt;,&gt;),
        typeof(ConsoleWriteLineBehavior&lt;,&gt;));</code></pre>
<h3>Podsumowanie</h3>
<p>Jak widzisz dzięki paczce MediatR jak łatwo jest użyć wzorca Mediator z CQRS.</p>
<p>Zobaczyłeś jak możesz wywołać polecenia i zapytania w stylu jeden do jednego.</p>
<p>Zobaczyłeś także jak możesz wysłać notyfikację w stylu jeden do wielu.</p>
<p>Masz także możliwość pisania swoich pośrednik&oacute;w (Pipeline Behaviours) i pisania logiki do swoich komunikat&oacute;w, gdy logika w nich się powtarza. W sumie to programowanie Aspektowe :)</p>
<p>Miłego programowania i polecam obejrzeć sw&oacute;j webinar, na kt&oacute;rym krok po kroku napisałem bardzo rozbudowaną aplikację używając CQRS.</p>
<p>Kod do pobrania tutaj :&nbsp;<a href="https://github.com/PanNiebieski/example-MediatR-ASPNETCORE5-CQRS" target="_blank" rel="noopener">https://github.com/PanNiebieski/example-MediatR-ASPNETCORE5-CQRS</a></p>
--------------------------------------------------
Response:
 W tej analizie omówione są podstawowe aspekty używania biblioteki MediatR w kontekście wzorca projektowania Command Query Responsibility Segregation (CQRS).

1. Wywołanie poleceń i zapytania: Użyj stylu jeden do jednego, aby wywołać polecenia i zapytania, używając interfejsów MediatRHandler i MediatRRQuery. To może być przystępne w sytuacjach, gdy nie trzeba zdefiniować wielu pośredników dla jednego typu komunikatu lub polecenia.
2. Wysyłanie notyfikacji: MediatR umożliwia wysłanie notyfikacji do wielu odbiorców, używając interfejsów MediatRRNotification i MediatRRNotificationHandler. To może być wygodne w sytuacjach, gdy chcesz przesłać informację dla różnych modułów lub systemów.
3. Pipeline Behaviours: Możesz pisać swoje pośredniki i logikę do swoich komunikatów, gdy logika w nich się powtarza. To programowanie Aspektowe, a może to być wygodne w sytuacjach, gdy chcesz pisać swoje własne pośredniki do walidacji, logowania i obliczeń.
4. Przykład: Otrzymujesz przykład kodu, który pokazuje, jak napisać aplikację, korzystając z CQRS w środowisku ASP.NET Core 5.

W sumie MediatR umożliwia tworzenie aplikacji opartych na wzorce CQRS i ułatwia zarządzanie komunikatami między elementami systemu.
==================================================
==================================================
# Translation to Polish
Prompt:
Możesz przetłumaczyć swoją poprzednią odpowiedź na język polski?
--------------------------------------------------
Response:
 W tej analizie omówione są podstawowe aspekty używania biblioteki MediatR w kontekście wzorca projektowania Command Query Responsibility Segregation (CQRS).
1. Wywołanie poleceń i zapytania: Użyj stylu jeden do jednego, aby wywołać polecenia i zapytania, używając interfejsów MediatRHandler i MediatRRQuery. To może być przystępne w sytuacjach, gdy nie trzeba zdefiniować wielu pośredników dla jednego typu komunikatu lub polecenia.
2. Wysyłanie notyfikacji: MediatR umożliwia wysłanie notyfikacji do wielu odbiorców, używając interfejsów MediatRRNotification i MediatRRNotificationHandler. To może być wygodne w sytuacjach, gdy chcesz przesłać informację dla różnych modułów lub systemów.
3. Pipeline Behaviours: Możesz pisać swoje pośredniki i logikę do swoich komunikatów, gdy logika w nich się powtarza. To programowanie Aspektowe, a może to być wygodne w sytuacjach, gdy chcesz pisać swoje własne pośredniki do walidacji, logowania i obliczeń.
4. Przykład: Otrzymujesz przykład kodu, który pokazuje, jak napisać aplikację, korzystając z CQRS w środowisku ASP.NET Core 5.

W sumie MediatR umożliwia tworzenie aplikacji opartych na wzorce CQRS i ułatwia zarządzanie komunikatami między elementami systemu.
==================================================
==================================================
# JSON Format
Prompt:
Format your previous answer to JSON.
Only provide a RFC8259 compliant JSON response following this format without deviation:
{
    "summary": "Summarize the article in no more than 100 words. Write a summary as if you were the author of the text"
}
--------------------------------------------------
Response:
 {
      "summary": "MediatR is a library that helps build applications based on the Command Query Responsibility Segregation (CQRS) pattern. This article explains how to use MediatR for sending commands, queries, and notifications; pipeline behaviors; and provides an example using ASP.NET Core 5."
   }
==================================================
==================================================
# JSON Translation to Polish
Prompt:
Możesz przetłumaczyć swoją poprzednią odpowiedź na język polski, zachowując format JSON?
Nie dodawaj zbędnych komentarzy. Nie zapomnij o „}” na końcu obiektu JSON.
--------------------------------------------------
Response:
 {
      "summary": "Biblioteka MediatR pomaga w budowie aplikacji opartych na wzorce Command Query Responsibility Segregation (CQRS). Tego artykułu poświęcono wykorzystaniu MediatR do wysyłania poleceń, zapytania i notyfikacji; pipeline'ów; oraz podać przykład kodu korzystający z CQRS w środowisku ASP.NET Core 5."
   }
==================================================
