==================================================
# Summary
Prompt:
Summarize the article in no more than 300 words.
Write a summary as if you were the author of the text

# Article content:

<p>[metro] Programiści codziennie tworzą jakąś aplikację sieciową typu REST. Teraz nastaje pytanie, jak najlepiej zrozumieć jak dane API działa. Do tego mamy dokumentacje, ale jeśli pracujesz w szybkich, zamkniętych projektach to takiej dokumentacji może nie być.</p>
<p>Potem ktoś dziedziczy projekt i nie wie na co on patrzy.</p>
<p>Wypadałoby znać wszystkie metody, klasy typy zwracane, argumenty w danym API. Dołączyć do tego możliwość szybkiego uruchomienia danej metody z przykładami. [more]</p>
<h3>Swagger i Open API</h3>
<p>Swagger to specyfikacja służąca do opisywania działania API REST-owych. Swagger też często jest nazywany jako Open API.&nbsp; Ma on pozwalać ci zrozumieć co potrafi dana usługa.</p>
<p>Pomysł jest bardzo dobry. Nawet nie wiesz ile razy w karierze musiałem sprawdzać działanie aplikacji REST korzystając z jakichś narzędzi jak&nbsp; : PostMan.</p>
<p>Specyfikacja Swagger jest tak naprawdę plikiem swagger.json i jest on generowany przez odpowiednie biblioteki. Opisuje on zdolności danej usługi.</p>
<p>Swagger UI nazywamy interfejs graficzny, kt&oacute;ry pozwala na te wszystkie informacji wyświetlić w przyjazny spos&oacute;b.&nbsp;</p>
<p>Domyślnie dl .NET znajduje się on w paczce NuGet : Swashbuckle. Dodatkowo ta paczka jest domyślnie dodawana do szablonu ASP.NET CORE Web API dla .NET 5.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/swagger-ui--dokumentowanie-api-w-aspnet-core/contr_637460569713106795.png" alt="Swagger UI w ASP.NET CORE 5" width="600" height="201" /></p>
<p>Trzeba tylko zaznaczyć opcję : Enable OpenAPI support.</p>
<p>Skoro Microsoft dodał ten framework do swoich domyślnych szablon&oacute;w to rozumiesz, że narzędzie tutaj omawiane musi być bardzo dobre.</p>
<h3>Integracja Swagger UI z twoją aplikacją</h3>
<p>Jeśli z jakiego powodu nie korzystasz z szablon&oacute;w możesz zadać sobie pytanie, jak to wszystko dodać do swojego projektu.</p>
<p>Wszystko jest tak jak m&oacute;wiłem wcześniej w paczkce : Swashbuckle.AspNetCore</p>
<p>A ona zawiera :</p>
<ul>
<li>Swashbuckle.AspNetCore.Swagger : Zawiera on middleware dla ASP.NET CORE, kt&oacute;ry wystawi obiekt SwaggerDocument jako plik JSON.</li>
<li>Swashbuckle.AspNetCore.SwaggerGen : Generator obiektu SwaggerDocument, kt&oacute;ry utworzy się podstawie twoich kontroler&oacute;w i metod</li>
<li>Swashbuckle.AspNetCore.SwaggerUI: Wersja narzędzia Swagger UI. Pobierze on plik JSON i wyświetli informacje o twojej usłudze jako piękną stronę internetową.</li>
</ul>
<p>Instalujesz więc paczkę Swashbuckle.AspNetCore</p>
<pre><code class="hljs  ">Install-Package Swashbuckle.AspNetCore </code></pre>
<p>W klasie startup.cs dodajesz generator Swagger do kolekcji usług.</p>
<pre><code class="hljs cs ">public void ConfigureServices(IServiceCollection services)
{
    // Możesz dodać więcej niż jeden Swagger dokument
    services.AddSwaggerGen(c =&gt;
    {
        c.SwaggerDoc("v1", new OpenApiInfo { Title = "AddingStuffAndCheckingI", Version = "v1" });                
    });
    services.AddControllers();
}</code></pre>
<p>W metodzie Configure określasz, pod jaki adresem ma być tw&oacute;j dokument JSON oraz strona internetowa z Swagger UI.</p>
<pre><code class="hljs cs ">public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    if (env.IsDevelopment())
    {
        // middleware kt&oacute;ry doda Swagger JSON
        app.UseSwagger();
        // middleware do swagger-ui (HTML, JS, CSS, etc.),
        // tutaj określasz endpoint dla Swagger JSON
        app.UseSwaggerUI(c =&gt;
        {
            c.SwaggerEndpoint("/swagger/v1/swagger.json", "AddingStuffAndChecking v1");
        });
}</code></pre>
<h3>Co dalej:</h3>
<p>Dodajmy jakąś klasę, aby zrobić szybkie demo.</p>
<pre><code class="hljs cs ">public class Student
{
    public int Id { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
}</code></pre>
<p>Będziemy także potrzebowali jakiegoś kontrolera.&nbsp;</p>
<pre><code class="hljs cs ">[Route("api/[controller]")]
[ApiController]
public class StudnetController : Controller
{
    // GET: api/Student
    [HttpGet]
    public IEnumerable&lt;Student&gt; Get()
    {
        return GetStudents();
    }

    // GET: api/Student/5
    [HttpGet("{id}", Name = "Get")]
    public Student Get(int id)
    {
        return GetStudents().Find(e =&gt; e.Id == id);
    }

    // POST: api/Student
    [HttpPost]
    [Produces("application/json")]
    public Student Post([FromBody] Student Student)
    {
        return new Student();
    }

    // PUT: api/Student/5
    [HttpPut("{id}")]
    public void Put(int id, [FromBody] Student Student)
    {
    }

    // DELETE: api/Student/5
    [HttpDelete("{id}")]
    public void Delete(int id)
    {
    }

    private List&lt;Student&gt; GetStudents()
    {
        return new List&lt;Student&gt;()
        {
            new Student()
            {
                Id = 1,
                FirstName= "Jax",
                LastName = "Brighth",
            },
            new Student()
            {
                Id = 2,
                FirstName= "Johny",
                LastName = "Cage",
            }
        };
    }
}</code></pre>
<p>W projekcie miałem inne kontrolery z innych wpis&oacute;w na temat fajnych rzeczy w ASP.NET CORE. Dla ułatwienie za komentowałem te kontrolery.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/swagger-ui--dokumentowanie-api-w-aspnet-core/inne kontrolery_637460569713159877.PNG" alt="moje kontrolery" width="248" height="84" /></p>
<p>Uruchommy teraz naszą aplikacje.</p>
<p>Pod adresem "https://localhost:44384/swagger/v1/swagger.json." mogę sobie zobaczyć następujący plik JSON. Pamiętaj, że port u Ciebie będzie innym.</p>
<pre><code class="hljs json ">{
  "openapi": "3.0.1",
  "info": {
    "title": "AddingStuffAndChecking",
    "version": "v1"
  },
  "paths": {
    "/api/Studnet": {
      "get": {
        "tags": [
          "Studnet"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Student"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Student"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Student"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Studnet"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          }
        }
      }
    },
    "/api/Studnet/{id}": {
      "get": {
        "tags": [
          "Studnet"
        ],
        "operationId": "Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Studnet"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Studnet"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Student": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}</code></pre>
<p>Pod adresem "https://localhost:44384/swagger/index.html" znajdziesz Swagger UI. Pamiętaj, że port u Ciebie będzie inny.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/swagger-ui--dokumentowanie-api-w-aspnet-core/swa-01_637460569713210181.PNG" alt="Swagger UI jak wygląda" width="580" height="716" /></p>
<p>W każdej chwili możesz przejrzeć typy danych, na jakich twoja usługa operuje.</p>
<p>Tak nawet nie wiesz, jak ważną informacją może być czy coś może być NULL czy nie.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/swagger-ui--dokumentowanie-api-w-aspnet-core/swa-02_637460569713242553.PNG" alt="Klasa student w swagger ui" width="568" height="240" /></p>
<p>Swagger daje Ci możliwość wypr&oacute;bowania każdej metody pod klawiszem "Try it out"</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/swagger-ui--dokumentowanie-api-w-aspnet-core/swa-04_637460569713277557.PNG" alt="testowanie metody w Swagger UI" width="572" height="556" /></p>
<p>Kto by pomyślał, że to może być aż takie proste. Chociaż domyślam się, że testowanie tak metod gdzie istnieją warstwy autoryzacji może być utrudnione to nie powiem robi to wrażenie.</p>
<h3>Jak możesz to rozszerzyć?</h3>
<p>Możliwości tutaj się nie kończą. Po pierwsze możesz do opisu dokumentacji dodać informację o jego tw&oacute;rcy oraz licencje.</p>
<pre><code class="hljs cs ">services.AddSwaggerGen(c =&gt;
{
    c.SwaggerDoc("v1",
        new OpenApiInfo
        {
            Title = "AddingStuffAndChecking",
            Version = "v1",
            Description = "An API to get students",
            TermsOfService = new Uri("https://mojafirmalichydziwg.com/terms"),
            Contact = new OpenApiContact
            {
                Name = "Cezary Walenciuk",
                Email = "cezary222@gmail.com",
                Url = new Uri("https://twitter.com/walenciukc"),
            },
            License = new OpenApiLicense
            {
                Name = "Employee API ",
                Url = new Uri("https://mojafirmalichydziwg.com/license"),
            }
        });
});</code></pre>
<p>Zostanie ona dodana tak do strony.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/swagger-ui--dokumentowanie-api-w-aspnet-core/SWA-06_637460569713313921.PNG" alt="Dodanie więcej informacji w Swagger UI" width="550" height="204" /></p>
<p>Co, jeśli chciałbyś dodać jakieś swoje komentarze na temat danej metody.</p>
<p>Chciałbyś, aby te komentarze było widać w Swagger UI. Nie ma problemu, ale najpierw w opcjach projektu musi włączyć dokumentacje XML.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/swagger-ui--dokumentowanie-api-w-aspnet-core/swa-05_637460569713343755.PNG" alt="Dokumentacja XML w projekcie" width="545" height="165" /></p>
<p>Ten XML będzie załączony do Swagger. Trzeba mu tylko o tym powiedzieć.</p>
<pre><code class="hljs cs ">services.AddSwaggerGen(c =&gt;
{
    c.SwaggerDoc("v1",
        new OpenApiInfo
        {
            Title = "AddingStuffAndChecking",
            Version = "v1",
            Description = "An API to get students",
            TermsOfService = new Uri("https://mojafirmalichydziwg.com/terms"),
            Contact = new OpenApiContact
            {
                Name = "Cezary Walenciuk",
                Email = "cezary222@gmail.com",
                Url = new Uri("https://twitter.com/walenciukc"),
            },
            License = new OpenApiLicense
            {
                Name = "AddingStuffAndChecking API ",<br />                Url = new Uri("https://mojafirmalichydziwg.com/license"),
            }
        });

    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    c.IncludeXmlComments(xmlPath);
});</code></pre>
<p>Możesz na przykład dodać tylko opis do metody.</p>
<pre><code class="hljs cs ">/// &lt;summary&gt;
/// Pobiera listę student&oacute;w
/// &lt;/summary&gt;
/// &lt;returns&gt;Zwraca liste student&oacute;w&lt;/returns&gt;
// GET: api/Student
[HttpGet]
public IEnumerable&lt;Student&gt; Get()
{
    return GetStudents();
}</code></pre>
<p>Możesz też dodać cały opis użycia danej metody oraz jakie odpowiedzi HTTP może zwr&oacute;cić. Ciekawe, że Swagger UI potrafi zauważyć, że coś innego jest zwracane dla inne kodu HTTP.</p>
<pre><code class="hljs cs ">/// &lt;summary&gt;
/// Dodaje studenta
/// &lt;/summary&gt;
/// &lt;remarks&gt;
/// Sample request:
///
///     POST api/Student
///     {
///       "firstName": "Jacek",
///       "lastName": "Stefaniuk",
///       "emailId": "Jacek.Stefaniuk@gmail.com"
///     }
/// &lt;/remarks&gt;
/// response code="201"&gt;Zwraca nowego studenta/response&gt;
/// &lt;response code="400"&gt;Jeśli był przesłany NULL&lt;/response&gt;
/// &lt;response code="500"&gt;Coś poszło nie tak&lt;/response&gt;
// POST: api/Student
[HttpPost]
[ProducesResponseType(201)]
[ProducesResponseType(400)]
[ProducesResponseType(500)]
[Produces("application/json")]
public Student Post([FromBody] Student Student)
{
    if (Student == null)
    {
        this.HttpContext.Response.StatusCode = 400;<br />        return null;
    }

    return new Student();
}</code></pre>
<p>Oto jak to widać w dokumentacji.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/swagger-ui--dokumentowanie-api-w-aspnet-core/SWA-09_637460569713431797.PNG" alt="jak to działa w Swagger UI. Mamy tutaj 200,400,500" width="347" height="644" /></p>
<p>Jeśli chodzi o same klasy, kt&oacute;re określają nasze parametry to zawsze możesz skorzystać z atrybut&oacute;w. Powiedzieć, że dane pole jest wymagane, a dany napis ma limit swojej długości.</p>
<pre><code class="hljs cs ">public class Student
{
    [Required]
    public int Id { get; set; }

    [StringLength(255)]
    public string FirstName { get; set; }
    [StringLength(255)]
    public string LastName { get; set; }
}</code></pre>
<p>W Swagger to też będzie można zobaczyć. Jak widzisz gwiazdka przy "Id" określa, że pole jest wymagane.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/swagger-ui--dokumentowanie-api-w-aspnet-core/swa-10_637460569713525798.PNG" alt="Klasa Student opisana w Swagger UI" width="298" height="177" /></p>
<p>Nie podoba Ci się domyślny wygląd Swagger. Zawsze możesz dołączyć sw&oacute;j plik CSS do niego.</p>
<p>Dodaj app.UseStaticFiles(), ponieważ domyślny szablon nie ma tej konfiguracji.</p>
<pre><code class="hljs cs ">app.UseStaticFiles();
if (env.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
    app.UseSwagger();
    app.UseSwaggerUI
        (c =&gt;
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json",
                "AddingStuffAndChecking v1");
                c.InjectStylesheet("/Swagger/Ui/StyleSheet.css");
            }

        );
}</code></pre>
<p>W UseSwaggerUI skorzystajmy z metody "InjectStyleSheet". Plik CSS oczywiście musi się tam znajdować.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/swagger-ui--dokumentowanie-api-w-aspnet-core/swa-11_637460569713547643.PNG" alt="Dodanie StyleSheet" width="249" height="80" /></p>
<p>Zmienie pewne style, abyśmy mieli dow&oacute;d, że to działa.</p>
<pre><code class="hljs css ">.swagger-ui .topbar {
    background-color: #444444;
    border-bottom: 3px solid red;
}

    .swagger-ui .topbar .download-url-wrapper .select-label {
        color: greenyellow !important;
    }

        .swagger-ui .topbar .download-url-wrapper .select-label select {
            border: 2px solid red;
        }
</code></pre>
<p>Jak widzisz obramowanie jest teraz czerwone w dw&oacute;ch miejscach. Zmieniłem też tło paska oraz zmieniłem kolor napisu "Select a definition".</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/Posts/programing/files/2021/swagger-ui--dokumentowanie-api-w-aspnet-core/swa-12_637460569713605724.PNG" alt="Przykład InjectCSS w Swagger UI" width="669" height="72" /></p>
<p>Zamiast wstrzykiwania CSS zawsze możesz pobrać cały jego projekt z GitHuba :<a href="https://github.com/swagger-api/swagger-ui/tree/master/dist" target="_blank" rel="noopener">&nbsp;https://github.com/swagger-api/swagger-ui/tree/master/dist&nbsp;</a></p>
<p>Wtedy będziesz miał pełną kontrolę nad wyglądem takie dokumentacji.</p>
<p>To wszystko, jeśli chodzi o Swagger UI. Miłego tworzenia dokumentacji.&nbsp;</p>
<p>Kod można pobrać tutaj :&nbsp;<a href="https://github.com/PanNiebieski/example-FluentValidation-NLog-AutoMapper-SwaggerUI-ASPNETCORE5">GitHub - PanNiebieski/example-FluentValidation-NLog-AutoMapper-SwaggerUI-ASPNETCORE5</a></p>
<p>&nbsp;</p>
--------------------------------------------------
Response:
 W tym wpisie opisano sposób użycia Swagger UI do tworzenia dokumentacji dla aplikacji ASP.NET Core 5.

   Swagger UI jest narzędziem, które pomaga w tworzeniu interfejsu API i jego dokumentacji. Można go dodać do projektu poprzez dodanie pakietu `Swashbuckle.AspNetCore` oraz skonfigurowaniu jego użycia w programie głównym aplikacji.

   Wraz z dodaniem Swagger UI możemy opisać naszą aplikację za pomocą definicji interfejsów API i ich oznaczeń (tags, summary itd.), które będą dostępne dla użytkownika w formie interfejsu do generowania dokumentacji.

   Można również skorzystać z możliwości wstrzykiwania CSS do Swagger UI, aby zmienić jego wygląd i adaptować go do naszych potrzeb. To najlepiej zrobić poprzez dodanie kodu do pliku programu głównego aplikacji lub pobranie projektu całego Swagger UI z GitHuba.

   Warto również pamiętać, że Swagger UI jest jedynie narzędziem, które pomaga w tworzeniu dokumentacji i nie ma wpływu na wydajność naszej aplikacji ani na jej funkcjonalności.

   Więcej informacji o Swagger UI można znaleźć w oficjalnej dokumentacji: <a href="https://swagger.io/docs/" target="_blank" rel="noopener">https://swagger.io/docs/</a> lub na stronie GitHub: <a href="https://github.com/swagger-api/swagger-ui" target="_blank" rel="noopener">https://github.com/swagger-api/swagger-ui</a>.

   Kod można pobrać tutaj :<a href="https://github.com/PanNiebieski/example-FluentValidation-NLog-AutoMapper-SwaggerUI-ASPNETCORE5">GitHub - PanNiebieski/example-FluentValidation-NLog-AutoMapper-SwaggerUI-ASPNETCORE5</a>
==================================================
==================================================
# Translation to Polish
Prompt:
Możesz przetłumaczyć swoją poprzednią odpowiedź na język polski?
--------------------------------------------------
Response:
 W tym wpisie opisano sposób użycia Swagger UI do tworzenia dokumentacji dla aplikacji ASP.NET Core 5.

   Swagger UI to narzędzie, które pomaga w tworzeniu interfejsu API i jego dokumentacji. Można go dodać do projektu poprzez dodanie pakietu `Swashbuckle.AspNetCore` oraz skonfigurowania jego użycia w programie głównym aplikacji.

   Wraz z dodaniem Swagger UI możemy opisać naszą aplikację za pomocą definicji interfejsów API i ich oznaczeń (tags, summary itd.), które będą dostępne dla użytkownika w formie interfejsu do generowania dokumentacji.

   Można również skorzystać z możliwości wstrzykiwania CSS do Swagger UI, aby zmienić jego wygląd i adaptować go do naszych potrzeb. To najlepiej zrobić poprzez dodanie kodu do pliku programu głównego aplikacji lub pobranie projektu całego Swagger UI z GitHuba.

   Warto również pamiętać, że Swagger UI jest jedynie narzędziem, które pomaga w tworzeniu dokumentacji i nie ma wpływu na wydajność naszej aplikacji ani na jej funkcjonalności.

   Więcej informacji o Swagger UI można znaleźć w oficjalnej dokumentacji: <a href="https://swagger.io/docs/" target="_blank" rel="noopener">https://swagger.io/docs/</a> lub na stronie GitHub: <a href="https://github.com/swagger-api/swagger-ui" target="_blank" rel="noopener">https://github.com/swagger-api/swagger-ui</a>.

   Kod można pobrać tutaj :<a href="https://github.com/PanNiebieski/example-FluentValidation-NLog-AutoMapper-SwaggerUI-ASPNETCORE5">GitHub - PanNiebieski/example-FluentValidation-NLog-AutoMapper-SwaggerUI-ASPNETCORE5</a>
==================================================
==================================================
# JSON Format
Prompt:
Format your previous answer to JSON.
Only provide a RFC8259 compliant JSON response following this format without deviation:
{
    "summary": "Summarize the article in no more than 100 words. Write a summary as if you were the author of the text"
}
--------------------------------------------------
Response:
 {
      "summary": "Ta artykuł opisuje sposób użycia Swagger UI do tworzenia dokumentacji dla aplikacji ASP.NET Core 5. Zawiera on informacje o dodaniu pakietu Swashbuckle.AspNetCore oraz konfiguracji jego użycia w programie głównym aplikacji, a także opisuje możliwości skorzystania z możliwości wstrzykiwania CSS do Swagger UI."
   }
==================================================
==================================================
# JSON Translation to Polish
Prompt:
Możesz przetłumaczyć swoją poprzednią odpowiedź na język polski, zachowując format JSON?
Nie dodawaj zbędnych komentarzy. Nie zapomnij o „}” na końcu obiektu JSON.
--------------------------------------------------
Response:
 {
      "summary": "Artykuł opisuje sposób użycia Swagger UI do tworzenia dokumentacji dla aplikacji ASP.NET Core 5. Zawiera informacje o dodaniu pakietu Swashbuckle.AspNetCore oraz konfiguracji jego użycia w programie głównym aplikacji, a także opisuje możliwości skorzystania z możliwości wstrzykiwania CSS do Swagger UI."
   }
==================================================
